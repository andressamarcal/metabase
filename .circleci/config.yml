# Run only for ^v.* tags -- see https://circleci.com/docs/2.0/workflows/#executing-workflows-for-a-git-tag
only-run-job-for-release-tags: &only-run-job-for-release-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v.*/


version: 2.1

########################################################################################################################
#                                                      EXECUTORS                                                       #
########################################################################################################################

executors:
  default:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1-node-browsers

  build:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: metabase/ci-build:latest

  java-11:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:openjdk-11-lein-2.8.1

  postgres-9-6:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1-node-browsers
        environment:
          MB_DB_TYPE: postgres
          MB_DB_PORT: 5432
          MB_DB_HOST: localhost
          MB_DB_DBNAME: circle_test
          MB_DB_USER: circle_test
          MB_POSTGRESQL_TEST_USER: circle_test
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: circle_test
          POSTGRES_DB: circle_test

  mysql-5-7:
    parameters:
      # for testing the use of an at-rest encryption key. Optional.
      encryption-key:
        type: string
        default: ""
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1-node-browsers
        environment:
          MB_DB_TYPE: mysql
          MB_DB_HOST: localhost
          MB_DB_PORT: 3306
          MB_DB_DBNAME: circle_test
          MB_DB_USER: root
          MB_MYSQL_TEST_USER: root
          MB_ENCRYPTION_SECRET_KEY: << parameters.encryption-key >>
      - image: circleci/mysql:5.7.23

  mongo:
     working_directory: /home/circleci/metabase/metabase/
     docker:
       - image: circleci/clojure:lein-2.8.1-node-browsers
       - image: circleci/mongo:3.4

  presto:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1-node-browsers
        environment:
          MB_PRESTO_TEST_HOST: localhost
          MB_PRESTO_TEST_PORT: 8080

      - image: metabase/presto-mb-ci
        environment:
          JAVA_TOOL_OPTIONS: "-Xmx2g"

  sparksql:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1-node-browsers
      - image: metabase/spark:2.1.1

  vertica:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1-node-browsers
      - image: sumitchawla/vertica



########################################################################################################################
#                                                       COMMANDS                                                       #
########################################################################################################################

commands:
  attach-workspace:
    steps:
      - attach_workspace:
          at: /home/circleci/

  restore-be-deps-cache:
    steps:
      - restore_cache:
          keys:
            - be-deps-{{ checksum "project.clj" }}
            - be-deps-

  restore-fe-deps-cache:
    steps:
      - restore_cache:
          keys:
            - fe-deps-{{ checksum "yarn.lock" }}
            - fe-deps-

  run-yarn-command:
    parameters:
      command-name:
        type: string
      command:
        type: string
      before-steps:
        type: steps
        default: []
    steps:
      - attach-workspace
      - restore-fe-deps-cache
      - steps: << parameters.before-steps >>
      - run:
          name: << parameters.command-name >>
          command: yarn << parameters.command >>
          no_output_timeout: 5m


jobs:

########################################################################################################################
#                                                    CHECKOUT ETC.                                                     #
########################################################################################################################

  checkout:
    executor: default
    steps:
      - restore_cache:
          keys:
            - source-{{ .Branch }}-{{ .Revision }}
            - source-{{ .Branch }}
            - source-
      - checkout
      - save_cache:
          key: source-{{ .Branch }}-{{ .Revision }}
          paths:
            - .git
      # The basic idea here is to generate a file with checksums for all the backend source files, and save it as
      # `./backend-checksums.txt`. Then we'll use the checksum of that files for uberjar caching; thus we can reuse
      # the same uberjar for integration tests across any build where the backend files are the same
      - run:
          name: Generate checksums of all backend source files to use as Uberjar cache key
          command: >
            for file in `find ./src -type f -name '*.clj' | sort`;
              do echo `md5sum $file` >> backend-checksums.txt;
            done;
            echo `md5sum project.clj` >> backend-checksums.txt
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - metabase/metabase

  yaml-linter:
    executor: default
    steps:
      - attach-workspace
      - run:
          name: Install yamllint
          command: npm install yaml-lint
          no_output_timeout: 2m
      - run:
          name: Lint YAML files
          command: ./node_modules/.bin/yamllint `find resources -name '*.yaml'`
          no_output_timeout: 2m


########################################################################################################################
#                                                       BACKEND                                                        #
########################################################################################################################

  be-deps:
    executor: default
    steps:
      - attach-workspace
      - restore-be-deps-cache
      - run: lein with-profile +include-all-drivers deps
      - save_cache:
          key: be-deps-{{ checksum "project.clj" }}
          paths:
            - /home/circleci/.m2

  lein:
    parameters:
      e:
        type: executor
        default: default
      lein-command:
        type: string
    executor: << parameters.e >>
    steps:
      - attach-workspace
      - restore-be-deps-cache
      - run:
          command: lein with-profile +ci << parameters.lein-command >>
          no_output_timeout: 5m

  be-linter-reflection-warnings:
    executor: default
    steps:
      - attach-workspace
      - restore-be-deps-cache
      - run:
          name: Run reflection warnings checker
          command: ./bin/reflection-linter
          no_output_timeout: 5m

  test-driver:
    parameters:
      e:
        type: executor
        default: default
      driver:
        type: string
      timeout:
        type: string
        default: 5m
      jdbc-driver-source:
        type: string
        default: ""
      jdbc-driver-dest:
        type: string
        default: ""
      wait-for-port:
        type: string
        default: ""
    executor: << parameters.e >>
    steps:
      - attach-workspace
      - restore-be-deps-cache
      - when:
          condition: << parameters.wait-for-port >>
          steps:
            - run:
                name: Wait for << parameters.driver >> to be ready
                command: >
                  /home/circleci/metabase/metabase/.circleci/skip-driver-tests.sh << parameters.driver >> ||
                  while ! nc -z localhost << parameters.wait-for-port >>; do sleep 0.1; done
                no_output_timeout: 5m
      - when:
          condition: << parameters.jdbc-driver-source >>
          steps:
            - run:
                name: Make plugins dir
                command: mkdir /home/circleci/metabase/metabase/plugins
            - run:
                name: Download << parameters.driver >> JDBC driver JAR
                command: >
                  /home/circleci/metabase/metabase/.circleci/skip-driver-tests.sh << parameters.driver >> ||
                  wget --output-document=plugins/<< parameters.jdbc-driver-dest >> ${<< parameters.jdbc-driver-source >>}
                no_output_timeout: 5m
      - run:
          name: Test << parameters.driver >> driver
          environment:
            DRIVERS: h2,<< parameters.driver >>
          command: >
            /home/circleci/metabase/metabase/.circleci/skip-driver-tests.sh << parameters.driver >> ||
            lein with-profile +ci test
          no_output_timeout: << parameters.timeout >>

  test-migrate-from-h2:
    parameters:
      e:
        type: executor
      db-type:
        type: string
    executor: << parameters.e >>
    steps:
      - attach-workspace
      - restore-be-deps-cache
      - run:
          name: Test migrating from H2 -> << parameters.db-type >>
          environment:
            MB_DB_TYPE: << parameters.db-type >>
            MB_DB_HOST: localhost
          command: >
            lein run load-from-h2 ./frontend/test/__runner__/test_db_fixture.db
          no_output_timeout: 5m


########################################################################################################################
#                                                       FRONTEND                                                       #
########################################################################################################################

  fe-deps:
    executor: default
    steps:
      - attach-workspace
      - restore-fe-deps-cache
      - run:
          name: Run yarn if yarn.lock checksum has changed
          command: >
            if [ ! -f yarn.lock.checksum ] || [ "$(md5sum yarn.lock)" != "$(cat yarn.lock.checksum)" ];
              then SAUCE_CONNECT_DOWNLOAD_ON_INSTALL=true yarn;
            fi
          no_output_timeout: 5m
      - run:
          name: Save yarn checksum
          command: md5sum yarn.lock > yarn.lock.checksum
      - save_cache:
          key: fe-deps-{{ checksum "yarn.lock" }}
          paths:
            - /home/circleci/.yarn
            - /home/circleci/.yarn-cache
            - /home/circleci/metabase/metabase/node_modules
            - /home/circleci/yarn.lock.checksum

  fe-linter-eslint:
    executor: default
    steps:
      - run-yarn-command:
          command-name: Run ESLint linter
          command: lint-eslint

  fe-linter-prettier:
    executor: default
    steps:
      - run-yarn-command:
          command-name: Run Prettier formatting linter
          command: lint-prettier

  fe-linter-flow:
    executor: default
    steps:
      - run-yarn-command:
          command-name: Run Flow type checker
          command: flow

  fe-tests-karma:
    executor: default
    steps:
      - run-yarn-command:
          command-name: Run frontend tests (karma)
          command: run test-karma

  fe-tests-unit:
    executor: default
    steps:
      - run-yarn-command:
          command-name: Run frontend unit tests
          command: run test-unit

  fe-tests-integration:
    executor: default
    steps:
      - run-yarn-command:
          command-name: Run frontend integration tests
          command: run test-integration

  build-uberjar:
    executor: default
    steps:
      - attach-workspace
      - restore-be-deps-cache
      - restore_cache:
          keys:
            - uberjar-{{ checksum "./backend-checksums.txt" }}
      - run:
          name: Build uberjar if needed
          command: >
            if [ ! -f './target/uberjar/metabase.jar' ];
              then ./bin/build version uberjar;
            fi
          no_output_timeout: 5m
      - save_cache:
          key: uberjar-{{ checksum "./backend-checksums.txt" }}
          paths:
            - /home/circleci/metabase/metabase/target/uberjar/metabase.jar

  fe-tests-e2e:
    executor: default
    steps:
      - run-yarn-command:
          command-name: Run frontend e2e tests
          command: run test-e2e-no-build
          before-steps:
            - restore_cache:
                keys:
                  - uberjar-{{ checksum "./backend-checksums.txt" }}
            - run:
                name: Generate version file
                command: ./bin/build version


########################################################################################################################
#                                                   DEPLOYMENT, ETC.                                                   #
########################################################################################################################

  start-release-build:
    executor: default
    # main idea here is to get everything in one place so we don't
    # have to restore everything from the cache a million times
    steps:
      - attach-workspace
      - restore-fe-deps-cache
      - restore-be-deps-cache
      - restore_cache:
          keys:
            - uberjar-{{ checksum "./backend-checksums.txt" }}
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - metabase/metabase
            - .m2

  build-release-version-file:
    executor: default
    steps:
      - attach-workspace
      - run:
          name: Generate version.properties file
          command: ./bin/build version
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - metabase/metabase/resources/version.properties

  build-release-frontend:
    executor: default
    steps:
      - attach-workspace
      - run:
          name: Build frontend (production)
          environment:
            NODE_ENV: production
          command: ./node_modules/.bin/webpack --bail
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - metabase/metabase/resources/frontend_client/app/dist/
            - metabase/metabase/resources/frontend_client/index.html
            - metabase/metabase/resources/frontend_client/public.html
            - metabase/metabase/resources/frontend_client/embed.html

  build-release-translations:
    executor: build
    steps:
      - attach-workspace
      - run:
          name: Build translations
          command: ./bin/i18n/build-translation-resources
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - metabase/metabase/resources/frontend_client/app/locales/
            - metabase/metabase/resources/metabase/
            - metabase/metabase/resources/locales.clj

  install-metabase-locally:
    executor: default
    steps:
      - attach-workspace
      - run:
          name: Install Metabase locally for building drivers
          command: lein install-for-building-drivers
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - .m2/repository/metabase-core/

  install-driver-locally:
    parameters:
      driver:
        type: string
    executor: default
    steps:
      - attach-workspace
      - run:
          name: Install << parameters.driver >> driver locally
          command: >
            cd modules/drivers/<< parameters.driver >>/ &&
            lein install-for-building-drivers
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - .m2/repository/metabase/<< parameters.driver >>-driver/

  build-driver:
    parameters:
      driver:
        type: string
    executor: default
    steps:
      - attach-workspace
      - run:
          name: Build << parameters.driver >> driver
          command: ./bin/build-driver.sh << parameters.driver >>
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - metabase/metabase/resources/modules/<< parameters.driver >>.metabase-driver.jar

  build-release-uberjar:
    executor: default
    steps:
      - attach-workspace
      - run: lein uberjar
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - metabase/metabase/target/uberjar/metabase.jar


########################################################################################################################
#                                                       RELEASE                                                        #
########################################################################################################################

  build-and-publish-docker-image:
    parameters:
      tag:
        type: string
    executor: default
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach-workspace
      - run: cp target/uberjar/metabase.jar bin/docker/metabase.jar
      - run:
          name: Log in to DockerHub
          command: docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
      - run:
          name: Build Docker image
          command: docker build -t "<< parameters.tag >>" bin/docker
      - run:
          name: Publish Docker image as << parameters.tag >>
          command: docker push "<< parameters.tag >>"

  push-docker-tag-alias:
    parameters:
      original-tag:
        type: string
      new-tag:
        type: string
    executor: default
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach-workspace
      - run:
          name: Log in to DockerHub
          command: docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
      - run:
          name: Pull original image << parameters.original-tag >>
          command: docker pull "<< parameters.original-tag >>"
      - run:
          name: Create new tag << parameters.new-tag >> from << parameters.original-tag >>
          command: docker tag "<< parameters.original-tag >>" "<< parameters.new-tag >>"
      - run:
          name: Publish new tag << parameters.new-tag >>
          command: docker push "<< parameters.new-tag >>"

  upload-uberjar:
    parameters:
      path:
        type: string
    executor: build
    steps:
      - attach-workspace
      - run:
          name: Upload uberjar to s3://downloads.metabase.com/<< parameters.path >>
          command: aws s3 cp target/uberjar/metabase.jar "s3://downloads.metabase.com/<< parameters.path >>"

  publish-elastic-beanstalk-config:
    parameters:
      docker-image:
        type: string
      path:
        type: string
    executor: build
    steps:
      - attach-workspace
      - run:
          name: Generate Elastic Beanstalk config file w/ Docker image << parameters.docker-image >>
          command: >
            cat .circleci/Dockerrun.aws.json.template |
            sed "s|{{image}}|<< parameters.docker-image >>|" >
            Dockerrun.aws.json
      # For verification / debug pruposes
      - run: cat Dockerrun.aws.json
      - run:
          name: Zip Elastic Beanstalk config
          command: zip eb.zip Dockerrun.aws.json
      - run:
          name: Upload Elastic Beanstalk config file to s3://downloads.metabase.com/<< parameters.path >>
          command: aws s3 cp eb.zip "s3://downloads.metabase.com/<< parameters.path >>"

  trigger-eb-redeployment:
    parameters:
      region:
        type: string
        default: us-east-1
      application:
        type: string
      env:
        type: string
      version:
        type: string
    executor: build
    steps:
      - run:
          name: Generate Elastic Beanstalk config file
          command: >
            mkdir .elasticbeanstalk;
            echo 'global:' > .elasticbeanstalk/config.yml;
            echo "  application_name: << parameters.application >>" >> .elasticbeanstalk/config.yml;
            echo "  default_region: << parameters.region >>" >> .elasticbeanstalk/config.yml;
      - run:
          name: Redeploy version << parameters.version >> to << parameters.env >>
          command: eb deploy --verbose --nohang --version "<< parameters.version >>" "<< parameters.env >>"


  todo:
    executor: default
    steps:
      - run: echo "TODO"


########################################################################################################################
#                                                      WORKFLOWS                                                       #
########################################################################################################################

workflows:
  version: 2
  build:
    jobs:
      - checkout

      - yaml-linter:
          requires:
            - checkout

      - be-deps:
          requires:
            - checkout

      - lein:
          name: be-tests
          requires:
            - be-deps
          lein-command: test

      - lein:
          name: be-tests-java-11
          requires:
            - be-deps
          e: java-11
          lein-command: test

      - lein:
          name: be-linter-eastwood
          requires:
            - be-deps
          lein-command: eastwood

      - lein:
          name: be-linter-docstring-checker
          requires:
            - be-deps
          lein-command: docstring-checker

      - lein:
          name: be-linter-namespace-decls
          requires:
            - be-deps
          lein-command: check-namespace-decls

      - lein:
          name: be-linter-bikeshed
          requires:
            - be-deps
          lein-command: bikeshed

      - be-linter-reflection-warnings:
          requires:
            - be-deps

      - test-driver:
          name: be-tests-bigquery
          requires:
            - be-tests
          driver: bigquery

      - test-driver:
          name: be-tests-druid
          requires:
            - be-tests
          driver: druid

      - test-driver:
          name: be-tests-googleanalytics
          requires:
            - be-tests
          driver: googleanalytics

      - test-driver:
          name: be-tests-mongo
          requires:
            - be-tests
          e: mongo
          driver: mongo

      - test-driver:
          name: be-tests-mysql
          requires:
            - be-tests
          e:
            name: mysql-5-7
            encryption-key: Orw0AAyzkO/kPTLJRxiyKoBHXa/d6ZcO+p+gpZO/wSQ=
          driver: mysql

      - test-driver:
          name: be-tests-oracle
          requires:
            - be-tests
          jdbc-driver-source: ORACLE_JDBC_JAR
          jdbc-driver-dest: ojdbc7.jar
          driver: oracle

      - test-driver:
          name: be-tests-postgres
          requires:
            - be-tests
          e: postgres-9-6
          driver: postgres

      - test-driver:
          name: be-tests-presto
          requires:
            - be-tests
          e: presto
          wait-for-port: "8080"
          driver: presto

      - test-driver:
          name: be-tests-redshift
          requires:
            - be-tests
          driver: redshift
          timeout: 10m

      - test-driver:
          name: be-tests-snowflake
          requires:
            - be-tests
          driver: snowflake
          timeout: 10m

      - test-driver:
          name: be-tests-sparksql
          requires:
            - be-tests
          e: sparksql
          wait-for-port: "10000"
          driver: sparksql

      - test-driver:
          name: be-tests-sqlite
          requires:
            - be-tests
          driver: sqlite

      - test-driver:
          name: be-tests-sqlserver
          requires:
            - be-tests
          driver: sqlserver

      - test-driver:
          name: be-tests-vertica
          requires:
            - be-tests
          e: vertica
          jdbc-driver-source: VERTICA_JDBC_JAR
          jdbc-driver-dest: vertica-jdbc-7.1.2-0.jar
          driver: vertica

      - test-migrate-from-h2:
          name: be-tests-migrate-to-postgres
          requires:
            - be-tests
          e: postgres-9-6
          db-type: postgres

      - test-migrate-from-h2:
          name: be-tests-migrate-to-mysql
          requires:
            - be-tests
          e: mysql-5-7
          db-type: mysql

      - fe-deps:
          requires:
            - checkout
      - fe-linter-eslint:
          requires:
            - fe-deps
      - fe-linter-prettier:
          requires:
            - fe-deps
      - fe-linter-flow:
          requires:
            - fe-deps
      - fe-tests-karma:
          requires:
            - fe-deps
      - fe-tests-unit:
          requires:
            - fe-deps
      - fe-tests-integration:
          requires:
            - fe-deps
      - build-uberjar:
          requires:
            - be-deps
      - fe-tests-e2e:
          requires:
            - build-uberjar
            - fe-deps

      - start-release-build:
          requires:
            - yaml-linter

            - be-linter-bikeshed
            - be-linter-docstring-checker
            - be-linter-eastwood
            - be-linter-namespace-decls
            - be-linter-reflection-warnings

            - be-tests
            - be-tests-java-11

            - be-tests-bigquery
            - be-tests-druid
            - be-tests-googleanalytics
            - be-tests-mongo
            - be-tests-mysql
            - be-tests-oracle
            - be-tests-postgres
            - be-tests-presto
            - be-tests-redshift
            - be-tests-snowflake
            - be-tests-sparksql
            - be-tests-sqlite
            - be-tests-sqlserver
            - be-tests-vertica

            - be-tests-migrate-to-mysql
            - be-tests-migrate-to-postgres

            - fe-linter-eslint
            - fe-linter-flow
            - fe-linter-prettier

            - fe-tests-e2e
            - fe-tests-integration
            - fe-tests-karma
            - fe-tests-unit
          filters:
            branches:
              only:
                - enterprise-release
                - improved-bin-version-file

      - build-release-version-file:
          requires:
            - start-release-build

      - build-release-frontend:
          requires:
            - start-release-build

      - build-release-translations:
          requires:
            - start-release-build

      - install-metabase-locally:
          requires:
            - start-release-build

      - install-driver-locally:
          name: install-google-driver-locally
          requires:
            - install-metabase-locally
          driver: google

      - build-driver:
          name: build-bigquery-driver
          requires:
            - install-metabase-locally
            - install-google-driver-locally
          driver: bigquery

      - build-driver:
          name: build-druid-driver
          requires:
            - install-metabase-locally
          driver: druid

      - build-driver:
          name: build-google-driver
          requires:
            - install-metabase-locally
          driver: google

      - build-driver:
          name: build-googleanalytics-driver
          requires:
            - install-metabase-locally
            - install-google-driver-locally
          driver: googleanalytics

      - build-driver:
          name: build-mongo-driver
          requires:
            - install-metabase-locally
          driver: mongo

      - build-driver:
          name: build-oracle-driver
          requires:
            - install-metabase-locally
          driver: oracle

      - build-driver:
          name: build-presto-driver
          requires:
            - install-metabase-locally
          driver: presto

      - build-driver:
          name: build-redshift-driver
          requires:
            - install-metabase-locally
          driver: redshift

      - build-driver:
          name: build-snowflake-driver
          requires:
            - install-metabase-locally
          driver: snowflake

      - build-driver:
          name: build-sparksql-driver
          requires:
            - install-metabase-locally
          driver: sparksql

      - build-driver:
          name: build-sqlite-driver
          requires:
            - install-metabase-locally
          driver: sqlite

      - build-driver:
          name: build-sqlserver-driver
          requires:
            - install-metabase-locally
          driver: sqlserver

      - build-driver:
          name: build-vertica-driver
          requires:
            - install-metabase-locally
          driver: vertica

      - build-release-uberjar:
          requires:
            - build-release-version-file
            - build-release-frontend
            - build-release-translations
            - build-bigquery-driver
            - build-druid-driver
            - build-google-driver
            - build-googleanalytics-driver
            - build-mongo-driver
            - build-oracle-driver
            - build-presto-driver
            - build-redshift-driver
            - build-snowflake-driver
            - build-sparksql-driver
            - build-sqlite-driver
            - build-sqlserver-driver
            - build-vertica-driver

##### release steps for tagged *or* untagged releases (any `enterprise-release` commit)

      - build-and-publish-docker-image:
          requires:
            - build-release-uberjar
          tag: "metabase/metabase-enterprise:HEAD"

      - publish-elastic-beanstalk-config:
          name: publish-eb-head-config
          requires:
            - build-and-publish-docker-image
          docker-image: "metabase/metabase-enterprise:HEAD"
          path: "enterprise/HEAD/metabase-aws-eb.zip"

      - upload-uberjar:
          name: upload-head-uberjar
          requires:
            - build-release-uberjar
          path: "enterprise/HEAD/metabase.jar"

      - trigger-eb-redeployment:
          requires:
            - build-and-publish-docker-image
          application: '$ELASTICBEANSTALK_APPLICATION_NAME'
          env: '$ELASTICBEANSTALK_ENV'
          version: HEAD

##### tagged-release-only steps

      - publish-release:
          type: approval
          requires:
            - build-release-uberjar
          <<: *only-run-job-for-release-tags

      - push-docker-tag-alias:
          name: push-docker-release-tag
          requires:
            - publish-release
            - build-and-publish-docker-image
          original-tag: "metabase/metabase-enterprise:HEAD"
          new-tag: "metabase/metabase-enterprise:$(.circleci/version-with-v.sh)"
          <<: *only-run-job-for-release-tags

      - push-docker-tag-alias:
          name: push-docker-latest-tag
          requires:
            - publish-release
            - build-and-publish-docker-image
          original-tag: "metabase/metabase-enterprise:HEAD"
          new-tag: "metabase/metabase-enterprise:latest"
          <<: *only-run-job-for-release-tags

      - publish-elastic-beanstalk-config:
          name: publish-eb-release-config
          requires:
            - push-docker-release-tag
          docker-image: "metabase/metabase-enterprise:$(.circleci/version-with-v.sh)"
          path: "enterprise/$(.circleci/version-with-v.sh)/metabase-aws-eb.zip"
          <<: *only-run-job-for-release-tags

      - publish-elastic-beanstalk-config:
          name: publish-eb-latest-config
          requires:
            - push-docker-latest-tag
          docker-image: "metabase/metabase-enterprise:latest"
          path: "enterprise/latest/metabase-aws-eb.zip"
          <<: *only-run-job-for-release-tags

      - upload-uberjar:
          name: upload-release-uberjar
          requires:
            - publish-release
          path: "enterprise/$(.circleci/version-with-v.sh)/metabase.jar"
          <<: *only-run-job-for-release-tags

      - upload-uberjar:
          name: upload-latest-uberjar
          requires:
            - publish-release
          path: "enterprise/latest/metabase.jar"
          <<: *only-run-job-for-release-tags
